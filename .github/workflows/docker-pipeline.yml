name: Publish Docker image
on: [push]
jobs:
  run-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'temurin'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
      - run: ./gradlew build

  use-sonarqube:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 18
        uses: actions/setup-java@v3
        with:
          java-version: '18'
          distribution: 'temurin'
      - name: SonarQube Scan
        run:
          ./gradlew sonarqube --info -Dsonar.projectKey=uk223
          -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
          -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  push_to_registry:
    needs: [run-test, use-sonarqube]
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: build image
        run: docker build . --file Dockerfile --tag ${{ secrets.DOCKER_USERNAME }}/pipeline-backend:latest

      - name: Push image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/pipeline-backend

      - name: deploy on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script:
            docker-compose down
            docker rmi ${{ secrets.DOCKER_USERNAME }}/pipeline-backend --force
            docker pull ${{ secrets.DOCKER_USERNAME }}/pipeline-backend --force
            docker-compose up -d

  automated-api-tests:
    needs: push_to_registry
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
      - name: Run API tests
        run: |
          postman collection run "21253228-4f9a0315-8d28-446d-9ce3-7104be9ab4ee" -e "21253228-0eaacb8f-21a1-4391-8604-6720bfa4bd4b"
          